name: Build dev on develop & strapi4 branch push

on:
  push:
    branches:
      - develop
      - strapi4

jobs:
  get-branch:
    runs-on: ubuntu-latest
    steps:
      - name: Set main branch
        if: ${{ github.ref_name=='strapi4' }}
        run: echo "branch=main" >> $GITHUB_OUTPUT
        id: vars

    outputs:
      branch: ${{ steps.vars.outputs.branch || github.ref_name }}

  build-cms:
    needs: get-branch
    runs-on: ubuntu-latest
    env:
      IMAGE_NAME: strapi-${{ needs.get-branch.outputs.branch }}
      BUILDER_IMAGE: registry.access.redhat.com/ubi8/nodejs-18:1-32
    steps:
      - name: Git Checkout
        uses: actions/checkout@v2

      - name: Set env
        run: echo "SHORT_SHA=$(git rev-parse --short HEAD)" >> $GITHUB_ENV

      - name: Login to OpenShift Container Repository
        uses: docker/login-action@v1
        with:
          registry: ${{secrets.OPENSHIFT_EXTERNAL_REPOSITORY}}
          username: ${{secrets.OPENSHIFT_SA_USERNAME}}
          password: ${{secrets.OPENSHIFT_SA_PASSWORD}}

      - name: s2i Build
        id: build_image
        uses: redhat-actions/s2i-build@v2
        with:
          path_context: "src/cms"
          builder_image: ${{ env.BUILDER_IMAGE }}
          image: ${{ secrets.OPENSHIFT_EXTERNAL_REPOSITORY }}/${{ secrets.OPENSHIFT_LICENSE_PLATE }}-tools/${{ env.IMAGE_NAME }}
          tags: latest ${{ env.SHORT_SHA }}
          env_vars: STRAPI_ADMIN_BACKEND_URL=

      - name: Push Docker image
        run: docker push --all-tags ${{ steps.build_image.outputs.image }}

  build-admin:
    needs: get-branch
    runs-on: ubuntu-latest
    env:
      IMAGE_NAME: admin-${{ needs.get-branch.outputs.branch }}
    steps:
      - name: Git Checkout
        uses: actions/checkout@v2

      - name: Set env
        run: |
          echo "SHORT_SHA=$(git rev-parse --short HEAD)" >> $GITHUB_ENV
          echo "REGISTRY_IMAGE=${{ secrets.OPENSHIFT_EXTERNAL_REPOSITORY }}/${{ secrets.OPENSHIFT_LICENSE_PLATE }}-tools/${{ env.IMAGE_NAME }}" >> $GITHUB_ENV

      - name: Login to OpenShift Container Repository
        uses: docker/login-action@v1
        with:
          registry: ${{secrets.OPENSHIFT_EXTERNAL_REPOSITORY}}
          username: ${{secrets.OPENSHIFT_SA_USERNAME}}
          password: ${{secrets.OPENSHIFT_SA_PASSWORD}}

      - name: Setup Node
        uses: actions/setup-node@v2
        with:
          node-version: "14"

      - name: npm build
        run: |
          npm install
          npm run build
        working-directory: src/admin

      - name: Docker build
        run: |
          docker build -t ${{ env.IMAGE_NAME }} .
          docker tag ${{ env.IMAGE_NAME }} ${{ env.REGISTRY_IMAGE }}:latest
          docker tag ${{ env.IMAGE_NAME }} ${{ env.REGISTRY_IMAGE }}:${{ env.SHORT_SHA }}
        working-directory: src/admin

      - name: Push Docker image
        run: docker push --all-tags ${{ env.REGISTRY_IMAGE }}

  build-public-builder:
    needs: get-branch
    runs-on: ubuntu-latest
    env:
      IMAGE_NAME: public-builder-${{ needs.get-branch.outputs.branch }}
    steps:
      - name: Git Checkout
        uses: actions/checkout@v2

      - name: Set env
        run: |
          echo "SHORT_SHA=$(git rev-parse --short HEAD)" >> $GITHUB_ENV
          echo "REGISTRY_IMAGE=${{ secrets.OPENSHIFT_EXTERNAL_REPOSITORY }}/${{ secrets.OPENSHIFT_LICENSE_PLATE }}-tools/${{ env.IMAGE_NAME }}" >> $GITHUB_ENV

      - name: Login to OpenShift Container Repository
        uses: docker/login-action@v1
        with:
          registry: ${{secrets.OPENSHIFT_EXTERNAL_REPOSITORY}}
          username: ${{secrets.OPENSHIFT_SA_USERNAME}}
          password: ${{secrets.OPENSHIFT_SA_PASSWORD}}

      - name: Build and push builder image
        run: |
          docker build -t ${{ env.IMAGE_NAME }} -f Builder.Dockerfile .
          docker tag ${{ env.IMAGE_NAME }} ${{ env.REGISTRY_IMAGE }}:latest
          docker tag ${{ env.IMAGE_NAME }} ${{ env.REGISTRY_IMAGE }}:${{ env.SHORT_SHA }}
        working-directory: src/gatsby

      - name: Push Docker image
        run: docker push --all-tags ${{ env.REGISTRY_IMAGE }}

      - name: Trigger Gatsby static build workflow
        uses: peter-evans/repository-dispatch@v1
        with:
          token: ${{ secrets.REPO_ACCESS_TOKEN }}
          event-type: publish-gatsby
          client-payload: '{"env": "dev", "branch": "${{ needs.get-branch.outputs.branch }}" }'

  build-maintenance:
    needs: get-branch
    runs-on: ubuntu-latest
    env:
      IMAGE_NAME: maintenance-${{ needs.get-branch.outputs.branch }}
    steps:
      - name: Git Checkout
        uses: actions/checkout@v2

      - name: Set env
        run: |
          echo "SHORT_SHA=$(git rev-parse --short HEAD)" >> $GITHUB_ENV
          echo "REGISTRY_IMAGE=${{ secrets.OPENSHIFT_EXTERNAL_REPOSITORY }}/${{ secrets.OPENSHIFT_LICENSE_PLATE }}-tools/${{ env.IMAGE_NAME }}" >> $GITHUB_ENV

      - name: Login to OpenShift Container Repository
        uses: docker/login-action@v1
        with:
          registry: ${{secrets.OPENSHIFT_EXTERNAL_REPOSITORY}}
          username: ${{secrets.OPENSHIFT_SA_USERNAME}}
          password: ${{secrets.OPENSHIFT_SA_PASSWORD}}

      - name: Docker build
        run: |
          docker build -t ${{ env.IMAGE_NAME }} .
          docker tag ${{ env.IMAGE_NAME }} ${{ env.REGISTRY_IMAGE }}:latest
          docker tag ${{ env.IMAGE_NAME }} ${{ env.REGISTRY_IMAGE }}:${{ env.SHORT_SHA }}
        working-directory: src/maintenance

      - name: Push Docker image
        run: docker push --all-tags ${{ env.REGISTRY_IMAGE }}

  deploy:
    runs-on: ubuntu-latest
    needs: [get-branch, build-cms, build-admin]
    steps:
      - name: Git Checkout
        uses: actions/checkout@v2

      - name: Login OpenShift
        uses: redhat-actions/oc-login@v1
        with:
          openshift_server_url: ${{ secrets.OPENSHIFT_SERVER_URL }}
          openshift_token: ${{ secrets.OPENSHIFT_SERVICE_TOKEN }}

      - name: Trigger rollout
        run: |
          oc -n ${{ secrets.OPENSHIFT_LICENSE_PLATE }}-dev rollout restart deployment ${{ needs.get-branch.outputs.branch }}-admin
          oc -n ${{ secrets.OPENSHIFT_LICENSE_PLATE }}-dev rollout restart deployment ${{ needs.get-branch.outputs.branch }}-cms
          oc -n ${{ secrets.OPENSHIFT_LICENSE_PLATE }}-dev rollout restart deployment ${{ needs.get-branch.outputs.branch }}-maintenance
